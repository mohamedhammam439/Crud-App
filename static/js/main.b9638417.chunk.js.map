{"version":3,"sources":["Component/Form/Form.js","Component/List/List.js","App.js","serviceWorker.js","index.js"],"names":["Form","props","className","onSubmit","AddCourse","type","value","current","onChange","updateCourse","id","List","state","isEdit","toggleCourse","setState","renderCourse","details","name","onClick","DeleteCourse","index","updatecourse","e","preventDefault","editCourseItem","input","editeCourse","defaultValue","ref","v","this","Component","App","courses","target","push","splice","courselist","length","map","course","key","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+OAYeA,EATF,SAACC,GACV,OACI,0BAAMC,UAAU,WAAWC,SAAUF,EAAMG,WACvC,2BAAOF,UAAU,YAAYG,KAAK,OAAOC,MAAOL,EAAMM,QAASC,SAAUP,EAAMQ,aAAcC,GAAG,SAChG,gDCqDGC,E,2MAvDXC,MAAM,CACFC,QAAS,G,EAIbC,aAAa,WAAK,IACTD,EAAQ,EAAKD,MAAbC,OACL,EAAKE,SAAS,CACVF,QAAUA,K,EAMlBG,aAAa,WACT,OACI,4BACI,8BAAO,EAAKf,MAAMgB,QAAQC,MAC1B,4BAAQC,QAAU,WAAM,EAAKlB,MAAMmB,aAAa,EAAKnB,MAAMoB,SAA3D,UACA,4BAAQF,QAAU,WAAM,EAAKL,iBAA7B,U,EAMZQ,aAAa,SAACC,GACVA,EAAEC,iBACF,EAAKvB,MAAMwB,eAAe,EAAKxB,MAAMoB,MAAO,EAAKK,MAAMpB,OACvD,EAAKQ,gB,EAOTa,YAAY,WACR,OACI,0BAAMxB,SAAU,EAAKmB,cACjB,2BAAOjB,KAAK,OAAOuB,aAAc,EAAK3B,MAAMgB,QAAQC,KAAMW,IAAK,SAACC,GAAM,EAAKJ,MAAQI,KACnF,4C,wEAOR,IAAIjB,EAAOkB,KAAKnB,MAAMC,OACtB,OACI,kBAAC,WAAD,KACKA,EAASkB,KAAKJ,cAAgBI,KAAKf,oB,GAnDjCgB,aCiFJC,G,iNA5EbrB,MAAM,CACJsB,QAAS,CACP,CAAChB,KAAK,WACN,CAACA,KAAK,UACN,CAACA,KAAK,WACLX,QAAQ,I,EAKbE,aAAa,SAACc,GACZ,EAAKR,SAAS,CACZR,QAAQgB,EAAEY,OAAO7B,S,EAOrBF,UAAU,SAACmB,GAET,GADAA,EAAEC,iBAC0B,KAAxBD,EAAEY,OAAOjB,KAAKZ,MAChB,OAAO,EAEP,IAAIC,EAAQ,EAAKK,MAAML,QACnB2B,EAAQ,EAAKtB,MAAMsB,QACvBA,EAAQE,KAAK,CAAClB,KAAKX,IACnB,EAAKQ,SAAS,CACZmB,UACA3B,QAAQ,M,EAQda,aAAa,SAACC,GACZ,IAAIa,EAAQ,EAAKtB,MAAMsB,QACvBA,EAAQG,OAAOhB,EAAM,GACrB,EAAKN,SAAS,CACZmB,a,EAMJT,eAAe,SAACJ,EAAMf,GACpB,IAAI4B,EAAQ,EAAKtB,MAAMsB,QACZA,EAAQb,GACb,KAAWf,EACjB,EAAKS,SAAS,CACZmB,a,wEAKM,IAAD,OACAA,EAASH,KAAKnB,MAAdsB,QAEDI,EADOJ,EAAQK,OACML,EAAQM,KAAI,SAACC,EAAOpB,GAC7C,OAAO,kBAAC,EAAD,CAAMJ,QAASwB,EAAQC,IAAKrB,EAAOD,aAAc,EAAKA,aAAcC,MAAOA,EAAOI,eAAgB,EAAKA,oBAE9G,0DAEF,OACE,iCACE,0DACA,kBAAC,EAAD,CAAOhB,aAAcsB,KAAKtB,aAAcL,UAAW2B,KAAK3B,UAAWG,QAASwB,KAAKnB,MAAML,UACvF,4BAAK+B,Q,GAvEKN,cCMEW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.b9638417.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\nconst Form = (props) =>{\r\n    return(\r\n        <form className='formlist' onSubmit={props.AddCourse}>\r\n            <input className='forminput' type='text' value={props.current} onChange={props.updateCourse} id='name' />\r\n            <button>Add Course</button>\r\n            \r\n        </form>\r\n    )\r\n}\r\nexport default Form;","import React, { Component,Fragment } from 'react';\r\n\r\n\r\nclass List extends Component{\r\n\r\n    state={\r\n        isEdit : false\r\n    }\r\n\r\n    // toggleCourse\r\n    toggleCourse=()=>{\r\n        let {isEdit}=this.state;\r\n        this.setState({\r\n            isEdit : !isEdit\r\n        })\r\n    }\r\n\r\n\r\n    // rendercourse\r\n    renderCourse=()=>{\r\n        return(\r\n            <li>\r\n                <span>{this.props.details.name}</span>    \r\n                <button onClick={ ()=> {this.props.DeleteCourse(this.props.index)}}>Delete</button>\r\n                <button onClick={ ()=> {this.toggleCourse()}} >Edit</button>\r\n            </li>\r\n        )\r\n    }\r\n\r\n    // updatecourse\r\n    updatecourse=(e)=>{\r\n        e.preventDefault();\r\n        this.props.editCourseItem(this.props.index ,this.input.value);\r\n        this.toggleCourse();\r\n\r\n    }\r\n\r\n\r\n\r\n    // editeCourse\r\n    editeCourse=()=>{\r\n        return(\r\n            <form onSubmit={this.updatecourse}>\r\n                <input type='text' defaultValue={this.props.details.name} ref={(v)=> {this.input = v} } />\r\n                <button>Update</button>\r\n            </form>\r\n        )\r\n    }\r\n\r\n\r\n    render(){\r\n        let isEdit=this.state.isEdit;\r\n        return(\r\n            <Fragment>\r\n               { isEdit ? this.editeCourse() : this.renderCourse() }\r\n                \r\n            </Fragment>\r\n        )\r\n    }\r\n}\r\nexport default List;","import React, { Component } from 'react';\nimport Form from './Component/Form/Form';\nimport List from './Component/List/List';\nimport './App.css';\n\n\nclass App extends Component{\n\n  state={\n    courses: [\n      {name:'English'},\n      {name:'Arabic'},\n      {name:'French'},\n    ], current:''\n  }\n\n\n  // updateCourse\n  updateCourse=(e)=>{\n    this.setState({\n      current:e.target.value\n    })\n\n  }\n\n\n  // AddCourse\n  AddCourse=(e)=>{\n    e.preventDefault();\n    if (e.target.name.value === '') {        // why must get id for this condition ?? (e.target = input )  (name = id of input in form)\n      return false                           // why we don't wright e.target.value onlyyyyyyyyyy ???!!\n    }else {                                 // what is the diffrent between - e.target.value & - e.target.name.value & - e.target.elements.name.value ??\n      let current=this.state.current;\n      let courses=this.state.courses;\n      courses.push({name:current})\n      this.setState({\n        courses ,\n        current:''\n      })\n    }\n  \n  }\n\n\n  // DeleteCourse\n  DeleteCourse=(index)=>{\n    let courses=this.state.courses;\n    courses.splice(index,1)\n    this.setState({\n      courses\n    })\n  }\n\n\n  // editCourseItem\n  editCourseItem=(index,value)=>{\n    let courses=this.state.courses;\n    let course=courses[index];\n    course['name'] = value;\n    this.setState({\n      courses\n    })\n  }\n\n\n  render() {\n    const {courses}=this.state;\n    const legnth=courses.length;\n    const courselist=legnth ? (courses.map((course,index)=>{\n      return <List details={course} key={index} DeleteCourse={this.DeleteCourse} index={index} editCourseItem={this.editCourseItem} />\n    })):(\n      <p>There Is No Courses To Show</p>\n    )\n    return(\n      <section>\n        <h1>What Do You Want To Learn?</h1>\n        <Form  updateCourse={this.updateCourse} AddCourse={this.AddCourse} current={this.state.current} />\n        <ul>{courselist}</ul>\n      </section>\n    )\n  }\n \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}